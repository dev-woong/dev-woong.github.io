[{"content":"Github Apps 란? GitHub API와 통합되는 프로젝트에서 GitHub 데이터에 접근하기 위한 세분화된 권한을 제공하기 때문에 GitHub에서 공식적으로 권장하는 Application 등록 방법입니다.\nGitHub App은 API를 통해 직접 작업을 수행하므로 별도의 봇 또는 서비스 계정이 필요하지 않습니다.\nGitHub App과 OAuth App의 차이점\nGithub Apps 생성하기 GitHub 로그인 GitHub Login 페이지에서 로그인합니다.\n설정 페이지 이동 GitHub 홈 화면에서 우측 상단 사용자 아이콘을 클릭 후 하단의 Setting를 클릭하면 설정 페이지로 이동됩니다.\n이동 후, 좌측 메뉴 최하단의 Developer settings 를 클릭합니다.\nDeveloper Setting 화면에서 좌측의 GitHub Apps를 클릭하고 New GitHub App을 클릭합니다. Password 또는 2-Factor 인증, 또는 휴대폰 앱을 통한 인증을 진행하면 GitHub Apps 설정 화면으로 이동합니다.\n세부 설정 * 표시가 붙어있는 항목은 필수 입력 항목입니다.\nRegister new GitHub App GitHub App Name : 생성할 GitHub App 이름 (기존 GitHub 계정과 동일한 이름 불가) This is displayed to users of your GitHub App : GitHub App에 대한 설명(마크다운 형식 지원) Homepage URL : 앱 웹사이트의 전체 URL 특별히 해당 앱을 사용하는 사이트가 없는 경우 https://127.0.0.1 (루프백)등으로 입력 Identifying and authorizing users Callback URL : 사용자가 해당 앱을 승인한 후 리디렉션 될 URL 이 URL은 앱이 사용자-서버 요청을 식별/승인해야 하는 경우 사용 Add Callback URL 을 통해 최대 10개의 추가 Callback URL을 사용 가능 Expire user authorization : 액세스 토큰에 대한 만료 설정 해당 옵션 선택 시 액세스 토큰이 만료될 때 업데이트된 토큰을 요청할 수 있는 refresh_token 제공 GitHub Docs - 사용자-서버 액세스 토큰 새로 고침 Request user ahtorization (OAuth) during installation : GitHub App에 사용자 권한 부여(OAuth) 해당 옵션 활성화 시 Callback URL이 필수 입력 항목으로 전환되고, 아래 Post Installation의 Setup URL은 비활성화됨 GitHub App 생성 후 Callback URL 로 리디렉션 되면 Callback Code 를 Get 파라미터로 전달받게 되고 이것으로 액세스 토큰을 발급 후 API에 액세스 GitHub Docs - Authorizing users during installation Enable Device Flow : CLI 도구 또는 Git 자격 증명 관리자와 같은 헤드리스 앱 권한 부여 GitHub Docs - Device Flow Post installation Setup URL : 추가 설정이 필요한 경우 GitHub App 구성 후 원하는 URL으로 리디렉션 상단 Identifying and authorizing users 에서 Request user ahtorization (OAuth) during installation 체크 시 비활성화 Redirect on update : GitHub App이 업데이트된 후 사용자를 Setup URL 로 리디렉션 (예: 리포지터리 추가/제거) Webhook Active : 웹훅 활성화 설정 Webhook URL : App에서 이벤트가 발생하는 경우 데이터를 받을 URL Webhook Secret : 원하는 사용자만 hook 을 받을 수 있도록 설정하는 선택적 보안 토큰 Repository permissions Permission(권한)은 총 3가지 상태로 지정할 수 있다.\nNo Access : 허용하지 않음 Read-only : 읽기만 허용 Read and Write : 읽기/쓰기 허용 Actions : GitHub의 CI/CD 플랫폼인 GitHub Actions 관련 권한 Administration : 리포지토리 생성, 삭제, 설정, 팀 및 Collaborators 관련 권한 Checks : 코드 검사 관련 권한 Code scanning alerts : 리포지토리의 보안 탭에 있는 코드 취약점 스캔 경고 관련 권한 Codespaces : GitHub 내장 IDE인 Codespace 생성, 편집, 삭제 등 관련 권한 Codespaces lifecycle admin : 특정 사용자에 대한 Codespace 시작/중지 등 lifecycle 관련 권한 Codespaces metadata : container 및 machine 등에 대한 Codespace 메타데이터 관련 권한 Codespaces secrets : Codespace에서 액세스할 수 있는 리포지토리에 대한 비밀 관련 권한 Commit statuses : 커밋 상태 관련 권한 Contents : 리포지토리, 커밋, 브랜치, 다운로드, 릴리즈 및 병합 관련 권한 Dependabot alerts : GitHub 종속성 관리 기능인 Dependabot의 경고 관련 권한 Dependabot secrets : Dependabot의 리포지토리 비밀 관련 권한 Deployments : 배포 및 배포 상태 관련 권한 Discussions : 토론 및 의견, 레이블 관련 권한 Environments : 리포지토리 환경 변수 관련 권한 Issues : 이슈 관련 권한 Merge queues 리포지토리의 병합 대기열 관리 권한 Metadata : 리포지터리 검색, Collaborators 나열, 리포지토리 메타데이터 관련 권한 Packages : GitHub 패키지 플랫폼 관련 권한 Pages : 정적 웹 호스팅 서비스 Github Pages 관련 권한 Projects : Github Projects 기능의 열 및 카드 관련 권한 Pull requests : Pull Request 기능 관련 권한 Secret scanning alerts : 비밀 스캔 알림 관련 권한 Secrets : 리포지토리 비밀 관련 권한 Single file : 하나의 파일만 관리하는 권한(..??) Webhooks : 웹훅 관련 권한 Workflows : GitHub Actions Workflow 파일 업데이트 관련 권한 Organization permissions Administration : 조직에 대한 액세스 관리 권한 Blocking users : 사용자 차단 관련 권한 Events : 조직의 트리거된(?) 이벤트 관련 권한 Members : 조직 구성원 및 팀 관련 권한 Organization codespaces : 조직의 Codespaces 관련 권한 Organization codespaces secrets : 조직의 Codespaces 비밀 관련 권한 Organization dependabot secrets : 조직의 Dependabot 비밀 관련 권한 Plan : 조직의 Plan(라이센스) 관련 권한 Projects : 조직 프로젝트 관련 권한 Secrets : 조직의 Actions 비밀 관리 권한 Self-hosted runners : 조직에서 사용할 수 있는 Actions 자체 호스팅 실행자 관련 권한 Team discussions : 팀 토론 및 관련 의견 관리 권한 Webhooks : 조직의 웹훅 관련 권한 User permissions Block another user : 사용자 차단 관련 권한 Codespaces user secrets : Codespace 비밀 관련 권한 Email addresses : 사용자의 이메일 주소 관련 권한 Followers : 사용자의 팔로워 관련 권한 GPG keys : 사용자의 GPG 키 관리 권한 Gists : 사용자의 GitHub Gists(코드, 메모, 로그 등 공유 기능) 관련 권한 Git SSH keys : Git을 통해 접근할 때에 사용되는 SSH 키 관련 권한 Interaction limits : 리포지토리 상호 작용 제한 권한 Plan : 사용자의 Plan(라이센스) 관련 권한 Profile : 사용자의 프로필 설정 관련 권한 Starring : 사용자가 Starring한 리포지토리 관련 권한 Watching : 사용자가 Watching하는 저장소 관련 권한 Subscribe to events 선택한 권한에 대해 구독할 이벤트를 선택합니다.\nMeta : 이 앱이 삭제되고 연결된 후크가 제거되는 경우 Security Advisory : 보안 권고가 게시, 업데이트 또는 철회되는 경우 생성 완료 최초 생성 이후에는 상단에 노란 바탕으로 경고 메시지가 발생하게 되는데 생성한 GitHub App에 Private Key가 1개도 없기 때문에 발생하는 문제입니다.\n하단의 Private keys 에서 Generate a private key 를 클릭해 Private Key를 하나 생성해주면 앱 사용 준비가 완료됩니다.\n참고 자료 : https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps\n","date":"2022-08-14T00:00:00Z","image":"https://dev-woong.io/p/github-apps-%EC%84%B8%EB%B6%80-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%83%9D%EC%84%B1/github_huae23cbee81be171be328d6e4b7bf84c2_2153626_120x120_fill_q75_box_smart1.jpg","permalink":"https://dev-woong.io/p/github-apps-%EC%84%B8%EB%B6%80-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%83%9D%EC%84%B1/","title":"Github Apps 세부 설정 및 생성"},{"content":"Access Token 이란? GitHub에서는 HTTPS 에서의 ID/Password 인증 방식을 금지하고 Access Token 인증 방식으로 전환되었습니다.\nPersonal Access Token은 HTTPS 인증 시 Git의 암호 대신 사용하거나 API를 인증하는 데 사용할 수 있는 값 입니다.\nPersonal Access Token 생성 GitHub 로그인 GitHub Login 페이지에서 로그인합니다.\n설정 페이지 이동 GitHub 홈 화면에서 우측 상단 사용자 아이콘을 클릭 후 하단의 Setting를 클릭하면 설정 페이지로 이동됩니다.\n이동 후, 좌측 메뉴 최하단의 Developer settings 를 클릭합니다.\nDeveloper Setting 화면에서 좌측의 Personal access tokens를 클릭하고 Generate new token을 클릭합니다.\n(작성자는 기존에 생성한 토큰이 한 개 있는 상태이므로 표시되는 화면이 다를 수 있습니다.)\n토큰 이름 : 자유롭게 작성 만료 기간 : 자유롭게 선택하거나, 만료되지 않도록 설정 토큰 권한 : git 로그인 또는 API 사용 시에 필요한 만큼의 권한 할당 Token 생성 완료 이제 생성한 토큰으로 HTTPS Url을 이용한 Clone 요청이나, GitHub의 여러 API(RestFul, GraphQL)등을 이용할 수 있습니다.\n","date":"2022-08-09T00:00:00Z","image":"https://dev-woong.io/p/github-personal-access-token-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/github_hu05bbc713fbac683e943f7daf5a88f075_1208353_120x120_fill_q75_box_smart1.jpg","permalink":"https://dev-woong.io/p/github-personal-access-token-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/","title":"GitHub Personal Access Token 생성하기"}]